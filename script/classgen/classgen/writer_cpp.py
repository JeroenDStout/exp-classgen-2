from calendar import c
from msilib.schema import File
from overrides import override
from .               import tree            as cg_tree
from .writer         import cg_writer

#
#
#
class cg_writer_cpp(cg_writer):
  def __init__(self, trunk:cg_tree.symbol_node):
    super().__init__(trunk)

  def get_block_gen_warning(self):
    return [
      "//",
      "//   This file was generated by classgen writer_cpp",
      "//            please do not edit by hand",
      "//"
    ]

  def get_block_initial_h(self):
    return [ "#pragma once", "" ] + self.get_block_gen_warning() + [ "" ]

  def get_block_initial_cpp(self):
    return self.get_block_gen_warning() + [ "" ]

  def write_decl_h(self, out_path:str, proj_name:str, base_name:str):
    contents = self.get_block_initial_h()
    self.write_if_updated(out_path, contents)    

  def write_impl_h(self, out_path:str, proj_name:str, base_name:str):
    contents = self.get_block_initial_h()
    contents += [ f'#include "{proj_name}/{base_name}_decl.h"', "" ]    
    self.write_if_updated(out_path, contents)    

  def write_cpp(self, out_path:str, proj_name:str, base_name:str):
    contents = self.get_block_initial_cpp()
    contents += [ f'#include "{proj_name}/{base_name}_decl.h"',
                  f'#include "{proj_name}/{base_name}_impl.h"', "" ]
    self.write_if_updated(out_path, contents)    